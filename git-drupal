#!/bin/sh
#
# Manages official Drupal modules & themes in repository.
#
# The MIT License (MIT)
#
# Copyright (c) 2016 Michał Lüth <michal.lueth@outlook.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Add git core programs to $PATH.
PATH=$PATH:$(git --exec-path)
# Include git scriplet
source git-sh-setup

require_work_tree
require_clean_work_tree

if [ $# -eq 0 ]; then
	set -- -h
fi

# Script options
OPTS_SPEC="\
git drupal add    <extension> <version> --prefix <prefix> [-m <message>] [-q] [--no-commit]
git drupal move   <extension> --prefix <prefix> [-m <message>] [-q] [--no-commit]
git drupal remove <extension> [-m <message>] [-q] [--no-commit]
git drupal update <extension> <version> [-m <message>] [-q] [--no-commit]
--
h,help            show help
P,prefix=         name of subdirectory where extensions are stored
  options for 'add', 'move', 'remove', 'update'
m,message=        use the given message as the commit message
q,quiet           supress most of the output, always show errors
no-commit         add changes to index but do not commit them
"
eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"

requirements(){
	local cmd=(
		curl
		tar
		wget
	)

	for cmd in "${cmd[@]}"; do
		if ! command -v $cmd >/dev/null 2>&1; then
			die "'$cmd' command not found on your system. Use your package manager to install it."
		fi
	done
}

# Require to run a command from the toplevel of GIT repository.
if [ "$(git rev-parse --show-toplevel)" != "$PWD" ]; then
  die "You need to run this command from the toplevel of the working tree."
fi

prefix=
message=
no_commit=
quiet=

#echo "Options: $*"
while [ $# -gt 0 ]; do
	opt="$1"
	shift
	case "$opt" in
		-P) prefix="$1";
				# Trim trailing slash.
				eval prefix="$(echo "$prefix" | sed 's/\/$//')"; shift ;;
		-m) message="$1"; shift ;;
		--no-commit) no_commit=1 ;;
		-q) quiet=1 ;;
		--) break ;;
		*) die "Unexpected option: $opt" ;;
	esac
done

# Do not allow to use `--message' and `--no-commit' simultaneously.
if [ -n "$message" -a -n "$no_commit" ]; then
	die "It does not make sense to use \`--message' with \`--no-commit'."
fi

# Supress outputs.
if [ -n "$quiet" ]; then
	flags="--quiet"
fi

command="$1"
shift
case "$command" in
	add|move|remove|update) ;;
	*) die "Unknown command '$command'" ;;
esac

# Require prefix for commands.
if [ "$command" == "add" -o "$command" == "move" ]; then
	if [ -z "$prefix" ]; then
		die "You must provide the --prefix option."
	fi
fi

# Try to determine extension type (module/theme) based on $prefix.
case $prefix in
	*modules*) extension_type="module" ;;
	*themes*) extension_type="theme" ;;
	*) extension_type="extension" ;;
esac

# Drupal
ftp="https://ftp.drupal.org/files/projects"
http="https://www.drupal.org/project"

# Validate extension (module/theme) name.
# The extension name must start with a letter and contains only of lowercase
# letters, digits and underscores.
# See Drupal docs: https://www.drupal.org/node/1074362
drupal_extension_name_validate() {
	if [[ "$1" =~ ^([a-z][a-z0-9\_]{0,}[^_])$ ]]; then
		EXTENSION="$1"
	else
		die "${extension_type^} name MUST start with a letter and contain only of lowercase letters, digits and underscores."
	fi
}

# Validate extension (module/theme) version.
# The extension version must start with a digit [3-9] (Drupal GIT repository has
# no releases under 3.x: http://cgit.drupalcode.org/drupal/refs).
# See Drupal docs: https://www.drupal.org/node/1015226
drupal_extension_version_validate() {
	if [[ "$1" =~ ^[3-9].* ]]; then
		VERSION="$1"
	else
		die "${extension_type^} version MUST start with a digit [3-9]."
	fi
}

# Check whether extension (module/theme) exists at drupal.org by requesting the
# extension URL containing of the extension name.
drupal_extension_url_exists() {
	local http_status="$(curl --location --output /dev/null --silent --head --fail -A $0 -w %{http_code} $http/$EXTENSION)"
	say "Looking for '$EXTENSION' $extension_type..."

	if [ $http_status -ne 200 ]; then
		case "$http_status" in
			404) die "'$EXTENSION' $extension_type not found." ;;
			*) die "${extension_type^} URL not accessible (HTTP response: $http_status)" ;;
		esac
	else
		say "[OK] '$EXTENSION' $extension_type found."
	fi
}

# Check whether extension (module/theme) version exists at drupal.org by
# requesting the archive (.tar.gz) filename containing of the extension name and
# the version number.
drupal_version_url_exists() {
	local archive="$EXTENSION-$VERSION.tar.gz"
	local ftp_status="$(curl --location --output /dev/null --silent --head --fail -A $0 -w %{http_code} $ftp/$archive)"
	say "Looking for '$VERSION' version of '$EXTENSION' $extension_type..."

	if [[ $ftp_status -ne 200 ]]; then
		case "$ftp_status" in
			404) die "'$VERSION' version of '$EXTENSION' $extension_type not found." ;;
			*) die "Version URL not accessible (HTTP response: $ftp_status)" ;;
		esac
	else
		say "[OK] '$VERSION' version of '$EXTENSION' $extension_type found."
	fi
}

drupal_extension_file_get() {
	local archive_file="$EXTENSION-$VERSION.tar.gz"

	if [ ! -d $prefix ]; then
		mkdir -p $prefix
	fi

	say "Downloading $archive_file..."
	wget $flags --directory-prefix=$prefix $ftp/$archive_file

	say "Unpacking $archive_file..."
	tar --directory=$prefix -xf $prefix/$archive_file

	say "Removing $archive_file..."
	rm $prefix/$archive_file

	say "[OK]"
}

# GIT
#
# Custom git config file (/.drupal).
config="$(git rev-parse --show-toplevel)/.drupal"

# Current branch name.
branch="$(git rev-parse --abbrev-ref HEAD)"

# This helper function checks wheter extension (module/theme) has been already
# added. It returns only TRUE or FALSE because errors depend on commands, e.g.
# the 'add' command returs error when the extension has been already added and
# the 'move' command needs the extension to be already present in working tree.
git_extension_exists() {
	if [ "$(git config --file $config --get extension.$EXTENSION.name)" == "$EXTENSION" -o -d "$prefix/$EXTENSION" ]; then
		return 0 # true
	else
		return 1 # false
	fi
}

# Add extension (module/theme) to custom git config file (/.drupal), add new
# files to index and commit changes.
git_extension_add() {
	git config --file $config --add extension.$EXTENSION.name "$EXTENSION"
	git config --file $config --add extension.$EXTENSION.version "$VERSION"
	git config --file $config --add extension.$EXTENSION.type "$extension_type"
	git config --file $config --add extension.$EXTENSION.branch "$branch"
	git config --file $config --add extension.$EXTENSION.prefix "$prefix"

	git add $config $prefix/$EXTENSION

	if [ -n "$message" ]; then
		commit_message="$message"
	else
		commit_message="Add $extension_type '$EXTENSION' $VERSION"
	fi

	if [ -z "$no_commit" ]; then
		git commit $flags $config $prefix/$EXTENSION -m "$commit_message"
	fi
}

# Update extension (module/theme) version in custom git config file (/.drupal),
# add new files to index and commit changes.
git_extension_update() {
	git config --file $config extension.$EXTENSION.version "$VERSION"
	git config --file $config extension.$EXTENSION.branch "$branch"

	git add $config $prefix/$EXTENSION

	if [ -n "$message" ]; then
		commit_message="$message"
	else
		commit_message="Update $extension_type '$EXTENSION' to $VERSION

old version: $version_current
new version: $VERSION"
	fi

	if [ -z "$no_commit" ]; then
		git commit $flags $config $prefix/$EXTENSION -m "$commit_message"
	fi
}

# Update extension (module/theme) prefix in custom git config file (/.drupal)
# and commit changes.
git_extension_move() {
	git config --file $config extension.$EXTENSION.branch "$branch"
	git config --file $config extension.$EXTENSION.prefix "$prefix"

	git add $config $prefix_current/$EXTENSION $prefix/$EXTENSION

	if [ -n "$message" ]; then
		commit_message="$message"
	else
		commit_message="Move $extension_type '$EXTENSION'

old path: $prefix_current
new path: $prefix"
	fi

	if [ -z "$no_commit" ]; then
		git commit $flags $config $prefix_current/$EXTENSION $prefix/$EXTENSION -m "$commit_message"
	fi
}

# Remove extension (module/theme) from custom git config file (/.drupal) and
# commit changes.
git_extension_remove() {
	extension_type="$(git config --file $config --get extension.$EXTENSION.type)"
	git config --file $config --remove-section extension.$EXTENSION

	if [ -n "$message" ]; then
		commit_message="$message"
	else
		commit_message="Remove $extension_type '$EXTENSION'"
	fi

	git add $config

	if [ -z "$no_commit" ]; then
		git commit $flags $config $prefix/$EXTENSION -m "$commit_message"
	fi
}

# Commit removal of custom git config file (/.drupal).
git_config_remove() {
	if [ -z "$no_commit" ]; then
		git commit $flags $config -m "Remove '/.drupal' git config file"
	fi
}

cmd_add() {
	drupal_extension_name_validate $1
	drupal_extension_version_validate $2

	if git_extension_exists; then
		die "'$EXTENSION' $extension_type already exists."
	fi

	requirements
	drupal_extension_url_exists
	drupal_version_url_exists
	drupal_extension_file_get

	git_extension_add
}

cmd_update() {
	drupal_extension_name_validate $1
	drupal_extension_version_validate $2
	extension_type="$(git config --file $config --get extension.$EXTENSION.type)"
	prefix="$(git config --file $config --get extension.$EXTENSION.prefix)"
	version_current="$(git config --file $config --get extension.$EXTENSION.version)"

	if git_extension_exists; then
		if [ "$(git config --file $config --get extension.$EXTENSION.version)" == "$VERSION" ]; then
			die "You have already the '$VERSION' of '$EXTENSION' $extension_type."
		fi
	else
			die "'$EXTENSION' $extension_type does not exists."
	fi

	drupal_extension_url_exists
	drupal_version_url_exists
	requirements
	drupal_extension_file_get

	git_extension_update
}

cmd_move() {
	drupal_extension_name_validate $1

	if ! git_extension_exists; then
		die "'$EXTENSION' $extension_type does not exists."
	fi

	local prefix_current="$(git config --file $config --get extension.$EXTENSION.prefix)"

	if [ "$prefix_current" == "$prefix" ]; then
		die "'$EXTENSION' $extension_type exists already within '$prefix'."
	fi

	if [ ! -d $prefix ]; then
		mkdir -p $prefix
	fi

	mv $prefix_current/$EXTENSION $prefix/ || die "One or more files could not be moved!"

	if [ -z "$no_commit" ]; then
		git_extension_move
	fi
}

cmd_remove() {
	drupal_extension_name_validate $1

	if ! git_extension_exists; then
		die "'$EXTENSION' $extension_type does not exists."
	fi

	prefix="$(git config --file $config --get extension.$EXTENSION.prefix)"

	rm -rf $prefix/$EXTENSION || die "One or more files could not be removed!"

	git_extension_remove

	# Remove custom git config file (/.drupal) if there are no more extensions
	# in it.
	if [ $(stat -c %s $config) = 0 ]; then
		rm $config
		git_config_remove
	fi
}

"cmd_$command" "$@"
